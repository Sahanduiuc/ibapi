/*! \page display_groups Display Groups
	
	Display Groups function allows API clients to integrate with <a target="_blank" class="linkexternal" href="https://www.interactivebrokers.com/en/software/tws/usersguidebook/mosaic/group_windows.htm">TWS Color Grouping Windows</a>. 
	
	TWS Color Grouping Windows are identified by a colored chain in TWS and by an integer number via the API. Currently that number ranges from 1 to 7 and are mapped to specific colors, as indicated in TWS.
	
	\section query_display_request Query Display Groups
	
	The @ref IBApi::EClient::queryDisplayGroups method is used to request all available Display Groups in TWS.
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs querydisplaygroups
		</li>
		<li>
			\snippet Testbed.java querydisplaygroups
		</li>
		<li> 
			\snippet MainModule.vb querydisplaygroups
		</li>
		<li> 
			\snippet TestCppClient.cpp querydisplaygroups
		</li>
		<li> 
			\snippet Program.py querydisplaygroups
		</li>
	</ul>
	
	The @ref IBApi::EWrapper::displayGroupList is a one-time response to @ref IBApi::EClient::queryDisplayGroups.
	
	It returns a list of integers representing visible Group ID separated by the \"|\" character, and sorted by most used group first. 
	This list will not change during TWS session. In other words, user cannot add a new group, but only the sorting of the group numbers can change. 
	
	Example: \"4|1|2|5|3|6|7\"
	
	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs ewrapperimpl
			...
			\snippet EWrapperImpl.cs displaygrouplist
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
			...
			\snippet EWrapperImpl.java displaygrouplist
		</li>
		<li> 
			\snippet EWrapperImpl.vb displaygrouplist
		</li>
		<li> 
			\snippet TestCppClient.h ewrapperimpl
			...
			\snippet TestCppClient.cpp displaygrouplist
		</li>
		<li> 
			\snippet Program.py ewrapperimpl
			...
			\snippet Program.py displaygrouplist
		</li>
	</ul>
	
	\section subscribe_to_group_events Subscribe To Group Events
	
	To integrate with a specific Group, you need to first subscribe to the group number by invoking @ref IBApi::EClient::subscribeToGroupEvents.
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs subscribetogroupevents
		</li>
		<li>
			\snippet Testbed.java subscribetogroupevents
		</li>
		<li> 
			\snippet MainModule.vb subscribetogroupevents
		</li>
		<li> 
			\snippet TestCppClient.cpp subscribetogroupevents
		</li>
		<li> 
			\snippet Program.py subscribetogroupevents
		</li>
	</ul>
	
	The @ref IBApi::EWrapper::displayGroupUpdated call back is triggered once after receiving the subscription request, and will be sent again if the selected contract in the subscribed display group has changed.
	
	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs ewrapperimpl
			...
			\snippet EWrapperImpl.cs displaygroupupdated
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
			...
			\snippet EWrapperImpl.java displaygroupupdated
		</li>
		<li> 
			\snippet EWrapperImpl.vb displaygroupupdated
		</li>
		<li> 
			\snippet TestCppClient.h ewrapperimpl
			...
			\snippet TestCppClient.cpp displaygroupupdated
		</li>
		<li> 
			\snippet Program.py ewrapperimpl
			...
			\snippet Program.py displaygroupupdated
		</li>
	</ul>
	
	
	\section update_display_group Update Display Group
	
	Once you have subscribed to a specific Group, you can then have the Group Window in TWS to display a certain contract by invoking @ref IBApi::EClient::updateDisplayGroup. 
	
	The encoded value that uniquely represents the contract in IB. Possible values include:
	
	1. none = empty selection
	
	2. contractID\@exchange - any non-combination contract. Examples: 8314\@SMART for IBM SMART; 8314\@ARCA for IBM \@ARCA
	
	3. combo = if any combo is selected
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs updatedisplaygroup
		</li>
		<li>
			\snippet Testbed.java updatedisplaygroup
		</li>
		<li> 
			\snippet MainModule.vb updatedisplaygroup
		</li>
		<li> 
			\snippet TestCppClient.cpp updatedisplaygroup
		</li>
		<li> 
			\snippet Program.py updatedisplaygroup
		</li>
	</ul>
	
	<em>Note: This request from the API does not get a response from TWS unless an error occurs.</em>
	
	In the above sample we have commanded TWS Windows that chained with Group #1 to display IBM\@SMART. The screenshot of TWS Mosaic below shows that 
	both the pink chained (Group #1) windows are now displaying IBM\@SMART, while the green chained (Group #4) window remains unchanged:
	
	\image html display_groups_sample.png
	
	\section unsubscribe_from_group_events Unsubscribe From Group Events
	
	Invoke the @ref IBApi::EClient::unsubscribeFromGroupEvents method to cancel a group subscription.
	
	<ul id="tab">
		<li class="active">
			\snippet Program.cs subscribefromgroupevents
		</li>
		<li>
			\snippet Testbed.java subscribefromgroupevents
		</li>
		<li> 
			\snippet MainModule.vb subscribefromgroupevents
		</li>
		<li> 
			\snippet TestCppClient.cpp subscribefromgroupevents
		</li>
		<li> 
			\snippet Program.py subscribefromgroupevents
		</li>
	</ul>
	
	<br><br>
	
	
	
	
*/