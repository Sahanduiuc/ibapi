/*! \page client_wrapper Introducing EWrapper and EClientSocket

	Once the TWS is up and running and actively listening for incoming connections we are ready to write our code. This draws our attention to the TWS API's two major components:
	the @ref IBApi::EWrapper interface and the @ref IBApi::EClientSocket
	
	\section ewrapper_impl Implementing the EWrapper interface
	
	The @ref IBApi::EWrapper interface is the mechanism through which the TWS delivers information to the API client application. By implementing this interface the client application will be 
	able to receive and handle the information coming from the TWS. For further information on how to implement interfaces, refer to your programming language's documentation.
	
	<ul id="tab">
		<li class="active"> 
		\snippet EWrapperImpl.cs ewrapperimpl
		</li>
		<li> 
		\snippet EWrapperImpl.java ewrapperimpl
		</li>
		<li>
		\snippet EWrapperImpl.vb ewrapperimpl
		</li>
		<li>
		\snippet TestCppClient.h ewrapperimpl
		</li>
		<li> 
		\snippet Program.py ewrapperimpl
		</li>
	</ul>
	
	\section client_socket The EClientSocket class
	
	Just as the EWrapper implementing class receives information from the TWS, an @ref IBApi::EClientSocket object is used to send requests to the the TWS. Note this class
	requires an implementation of the @ref IBApi::EWrapper interface as part of its constructor parameters. Behind the curtains the @ref IBApi::EClientSocket requires this object to
	invoke the @ref IBApi::EWrapper interface methods after reading the incoming data from the TWS. Another crucial element is the @ref IBApi::EReaderSignal object passed to the
	EClientSocket's constructor. We will discuss this object in more detail in the @ref ereader section.
	
	<ul id="tab">
		<li class="active"> 
		\snippet EWrapperImpl.cs socket_declare
		...
		\snippet EWrapperImpl.cs socket_init
		</li>
		<li>
		\snippet EWrapperImpl.java socket_declare
		...
		\snippet EWrapperImpl.java socket_init
		</li>
		<li>
		\snippet EWrapperImpl.vb socket_declare
		...
		\snippet EWrapperImpl.vb socket_init
		</li>
		<li>
		\snippet TestCppClient.h socket_declare
		...
		\snippet TestCppClient.cpp socket_init
		</li>
		<li> 
		\snippet Program.py socket_declare
		...
		\snippet Program.py socket_init
		</li>
	</ul>
	
	<br><br>

*/