/*! \page md_receive Receiving Market Data

   \section market_data_return Receiving Market Data

   Real time data is accessed in the API using a subscribe-and-publish model that is also used with other functionality such as retrieving positon or account values. After a streaming market data subscription request for a particular contract in IB's database is made, a continuous stream of market data is returned by TWS and separated to different functions in EWrapper depending on the data type (integer vs decimal vs string). Since the subscribe-and-publish model is inherently asynchronous, the returned data is linked to the initial request using a numerical label specified in the request called the request ID (reqID). 
   
   After subscribing to the ticker stream, your API client will receive the data supplied by the TWS API server via several methods. In your API client code, you will need to implement 
   these methods to manipulate the data relayed back to the client. Notice how market data callbacks such as @ref IBApi::EWrapper::tickPrice and @ref IBApi::EWrapper::tickSize methods contain the request id with
   which the response can be mapped to its originating request. By default, there are certain 'default tick types' that are always returned. These include fields such as the bid price, ask price, bid size, ask size, etc. There are additional types of data available with the real time data that are requested by specifying certain "generic tick types" in the market data request. For more information, \ref genticks.
   
   When IBApi::EWrapper::tickPrice and IBApi::EWrapper::tickSize are reported as -1, this indicates that there is no data currently available. Most commonly this occurs when requesting data from markets that are closed. It can also occur for infrequently trading instruments which do not have open bids or offers at that time of the request. To receive frozen quotes (the last available bid/ask recorded by the system) invoke the function @ref IBApi::EClient::reqMarketDataType with argument 2. Alternatively, to receive "delayed frozen" data from tickers without holding market data subscriptions, specify a market data type of 4. Frozen data is exclusive to default tick types- \ref genticks are not available- and requires market data subscriptions.
   
   Following every IBApi::EWrapper::tickPrice callback there will be a IBApi::EWrapper::tickSize. This is important because with combo contracts, an actively trading contract can have a price of zero. In this case it will have a positive IBApi::EWrapper::tickSize value. IBApi::EWrapper::tickSize is also invoked every time there is a change in the size of the last traded price. For that reason, there will be duplicate tickSize events when both the price and size of a trade changes. 
   
   <ul id="tab">
		<li class="active"> 
			\snippet EWrapperImpl.cs ewrapperimpl
		   ...
		   \snippet EWrapperImpl.cs tickprice
		   
		   The boolean value canAutoExecute in tickPrice is intended to indicate that a quote is available for immediate execution. The boolean value pastLimit indicates whether the bid price is lower than the day's lowest value or the ask price is higher than the highest ask. 
		   
		   \snippet EWrapperImpl.cs ticksize
		   ....
		   \snippet EWrapperImpl.cs tickstring
		   ....
		   \snippet EWrapperImpl.cs tickgeneric
		</li>
		<li>
			\snippet EWrapperImpl.java ewrapperimpl
		   ...
		   \snippet EWrapperImpl.java tickprice
		   
		   The boolean value canAutoExecute in tickPrice is intended to indicate that a quote is available for immediate execution. The boolean value pastLimit indicates whether the bid price is lower than the day's lowest value or the ask price is higher than the highest ask.
		   
		   \snippet EWrapperImpl.java ticksize
		   ...
		   \snippet EWrapperImpl.java tickstring
		   ...
		   \snippet EWrapperImpl.java tickgeneric
		</li>
		<li>
			\snippet EWrapperImpl.vb ewrapperimpl
		   ...
		   \snippet EWrapperImpl.vb tickprice
		   
		   The boolean value canAutoExecute in tickPrice is intended to indicate that a quote is available for immediate execution. The boolean value pastLimit indicates whether the bid price is lower than the day's lowest value or the ask price is higher than the highest ask.
		   
		   \snippet EWrapperImpl.vb ticksize
		   ....
		   \snippet EWrapperImpl.vb tickstring
		   ....
		   \snippet EWrapperImpl.vb tickgeneric
		</li>
		<li>
			\snippet TestCppClient.h ewrapperimpl
		   ...
		   \snippet TestCppClient.cpp tickprice
		   
		   The boolean value canAutoExecute in tickPrice is intended to indicate that a quote is available for immediate execution. The boolean value pastLimit indicates whether the bid price is lower than the day's lowest value or the ask price is higher than the highest ask.
		   
		   \snippet TestCppClient.cpp ticksize
		   ....
		   \snippet TestCppClient.cpp tickstring
		   ....
		   \snippet TestCppClient.cpp tickgeneric
		</li>
		<li>
			\snippet Program.py ewrapperimpl
		   ...
		   \snippet Program.py tickprice
		   
		   The boolean value canAutoExecute in tickPrice is intended to indicate that a quote is available for immediate execution. The boolean value pastLimit indicates whether the bid price is lower than the day's lowest value or the ask price is higher than the highest ask.
		   
		   \snippet Program.py ticksize
		   ....
		   \snippet Program.py tickstring
		   ....
		   \snippet Program.py tickgeneric
		</li>
	</ul>
	
	\section smart_mapping Exchange Component Mapping

   A market data request is able to return data from multiple exchanges. Beginning in TWS/IBG v<b>963</b> and API v<b>973.02</b>, after a market data request is made for an instrument covered by market data subscriptions, a message will be sent to function IBApi::EWrapper::tickReqParams with information about 'minTick', BBO exchange mapping, and available snapshot permissions. 

	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs tickReqParams
		</li>
		<li>
			\snippet EWrapperImpl.java tickReqParams
		</li>
		<li>
			\snippet EWrapperImpl.vb tickReqParams
		</li>
		<li>
			\snippet TestCppClient.cpp tickReqParams
		</li>
		<li>
			\snippet Program.py tickReqParams
		</li>
	</ul>

	The exchange mapping identifier <i>bboExchange</i> will be a symbol such as "a6" which can be used to decode the single letter exchange abbreviations returned to the bidExch, askExch, and lastExch fields by invoking the function IBApi::EClient::reqSmartComponents. More information about @ref smart_components.

	IBApi::ContractDetails::MinTick will represent the smallest possible minimum increment for the contract on any exchange and at any price. For complicated minimum increment structures, such as is common for European stocks, there might be different minimum increments at different price and size levels, so the 'minTick' of the contract will sometimes not represent the minimum increment at which it is presently trading. It is possible to retrieve the complete minimum price increment struture from the API using the function IBApi.EClient.reqMarketRule, or to consult the IB Contracts and Securities search site. 
	
	\section rerouting Re-Routing CFDs
	
	IB does not provide market data for certain types of instruments, such as stock CFDs and forex CFDs. If a stock CFD or forex CFD is entered into a TWS watchlist, TWS will automatically display market data for the underlying ticker and show a 'U' icon next to the instrument name to indicate that the data is for the underlying instrument. 
	
	From the API, when level 1 or level 2 market data is requested for a stock CFD or a forex CFD, a callback is made to the functions IBApi::EWrapper::rerouteMktDataReq or IBApi::EWrapper::rerouteMktDepthReq respectively with details about the underlying instrument in IB's database which does have market data. 
	
	<ul id="tab">
		<li class="active">
			\snippet EWrapperImpl.cs rerouteMktDataReq
			...
			\snippet EWrapperImpl.cs rerouteMktDepthReq
		</li>
		<li>
			\snippet EWrapperImpl.java rerouteMktDataReq
			...
			\snippet EWrapperImpl.java rerouteMktDepthReq
		</li>
		<li>
			\snippet EWrapperImpl.vb rerouteMktDataReq
			...
			\snippet EWrapperImpl.vb rerouteMktDepthReq
		</li>
		<li>
			\snippet TestCppClient.cpp rerouteMktDataReq
			...
			\snippet TestCppClient.cpp rerouteMktDepthReq
		</li>
		<li>
			\snippet Program.py rerouteMktDataReq
			...
			\snippet Program.py rerouteMktDepthReq
		</li>
	</ul>
	
	<br><br>
	
*/
