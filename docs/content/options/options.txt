/*! \page options Options

	\section option_chains Option Chains

	The option chain for a given security can be returned using the function reqContractDetails. If an option contract is incompletely defined (for instance with the strike undefined) and used as an argument to IBApi::EClient::reqContractDetails, a list of all matching option contracts will be returned. 

	The example below shows an "incomplete" option @ref IBApi::Contract with no last trading day, strike nor multiplier defined. In most cases using such a contract would result into a contract ambiguity error since there are lots of instruments matching the same description. @ref IBApi::EClient::reqContractDetails will instead use it to obtain the whole option chain from the TWS.
		
	<ul id="tab">
		<li class="active"> 
			\snippet ContractSamples.cs optionforquery
			...
			\snippet Program.cs reqcontractdetails
		</li>
		<li>
			\snippet ContractSamples.java optionforquery
			...
			\snippet Testbed.java reqcontractdetails
		</li>
		<li>
			\snippet ContractSamples.vb optionforquery
			...
			\snippet MainModule.vb reqcontractdetails
		</li>
		<li>
			\snippet ContractSamples.cpp optionforquery
			...
			\snippet TestCppClient.cpp reqcontractdetails
		</li>
		<li>
			\snippet ContractSamples.py optionforquery
			...
			\snippet Program.py reqcontractdetails
		</li>
	</ul>

	One limitation of this technique is that the return of option chains will be throttled and take a longer time the more ambiguous the contract definition. Starting in version 9.72 of the API, a new function IBApi::EClient::reqSecDefOptParams is introduced that does not have the throttling limitation. 
	
	- It is not recommended to use reqContractDetails to receive complete option chains on an underlying, e.g. all combinations of strikes/rights/expiries. 
	- For very large option chains returned from reqContractDetails, unchecking the setting in TWS Global Configuration at API -> Settings -> "Expose entire trading schedule to the API" will decrease the amount of data returned per option and help to return the contract list more quickly.
	
	<ul id="tab">
		<li class="active"> 
			\snippet Program.cs reqsecdefoptparams
			...
			\snippet EWrapperImpl.cs securityDefinitionOptionParameter
		</li>
		<li>
			\snippet Testbed.java reqsecdefoptparams
			...
			\snippet EWrapperImpl.java securityDefinitionOptionParameter
		</li>
		<li>
			\snippet MainModule.vb reqsecdefoptparams
			...
			\snippet EWrapperImpl.vb securityDefinitionOptionParameter
		</li>
		<li>
			\snippet TestCppClient.cpp reqsecdefoptparams
			...
			\snippet TestCppClient.cpp securityDefinitionOptionParameter
		</li>
		<li>
			\snippet Program.py reqsecdefoptparams
			...
			\snippet Program.py securityDefinitionOptionParameter
		</li>
	</ul>

	IBApi::EClient::reqSecDefOptParams returns a list of expiries and a list of strike prices. In some cases it is possible there are combinations of strike and expiry that would not give a valid option contract. 

	The API can return the greek values in real time for options, as well as calculate the implied volatility given a hypothetical price or calculate the hypothetical price given an implied volatility. 
	- \subpage option_computations

	\section option_exercising Exercising options

	Options are exercised or lapsed from the API with the function @ref IBApi::EClient::exerciseOptions
	
	- Option exercise will appear with order status side = "BUY" and limit price of 0, but only at the time the request is made
	- Option exercise can be distinguished by price = 0
	
	<ul id="tab">
		<li class="active"> 
			\snippet Program.cs exercise_options
		</li>
		<li>
			\snippet Testbed.java exercise_options
		</li>
		<li>
			\snippet MainModule.vb exercise_options
		</li>
		<li>
			\snippet TestCppClient.cpp exercise_options
		</li>
		<li>
			\snippet Program.py exercise_options
		</li>
	</ul>


	<br><br>
*/