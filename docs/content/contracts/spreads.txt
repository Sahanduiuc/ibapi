/*! \page spread_contracts Spreads

	Spread contracts, also known as combos or combinations, combine two or more instruments. To define a combination contract it is required to know the conId of the @ref IBApi::Contract 
	in question. The conId of an instrument can easily be obtained via the @ref IBApi::EClientSocket::reqContractDetails request.
	
	The spread contract's symbol can be either the symbol of one of the contract legs or, for two-legged combinations the symbols of both legs separated by a comma as shown in the examples
	below.
	
	\section bag_stk Stock Spread
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bagstkcontract
		</li>
		<li>
			\snippet ContractSamples.java bagstkcontract
		</li>
		<li>
			\snippet ContractSamples.vb bagstkcontract
		</li>
		<li>
			\snippet ContractSamples.cpp bagstkcontract
		</li>
		<li>
			\snippet ContractSamples.py bagstkcontract
		</li>
	</ul>
	
	<b>Note:</b> EFPs are simply defined as a bag contract of stock and corresponding SSF with a ratio of 100:1. 
	
	\section bag_opt Options Spread
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bagoptcontract
		</li>
		<li>
			\snippet ContractSamples.java bagoptcontract
		</li>
		<li>
			\snippet ContractSamples.vb bagoptcontract
		</li>
		<li>
			\snippet ContractSamples.cpp bagoptcontract
		</li>
		<li>
			\snippet ContractSamples.py bagoptcontract
		</li>
	</ul>
	
	\section bag_fut Guaranteed Futures Spread
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bagfutcontract
		</li>
		<li>
			\snippet ContractSamples.java bagfutcontract
		</li>
		<li>
			\snippet ContractSamples.vb bagfutcontract
		</li>
		<li>
			\snippet ContractSamples.cpp bagfutcontract
		</li>
		<li>
			\snippet ContractSamples.py bagfutcontract
		</li>
	</ul>
	
	\section bag_smartfuture Smart-Routed Futures Spread
	
	Futures spreads can also be defined as Smart-routed (non-guaranteed) combos. When placing an order for a non-guaranteed combo from the API, the non-guaranteed flag must be set to 1. Historical data for smart-routed futures spreads is generally available from the API with the requisite market data subscriptions.
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs smartfuturespread
		</li>
		<li>
			\snippet ContractSamples.java smartfuturespread
		</li>
		<li>
			\snippet ContractSamples.vb smartfuturespread
		</li>
		<li>
			\snippet ContractSamples.cpp smartfuturespread
		</li>
		<li>
			\snippet ContractSamples.py smartfuturespread
		</li>
	</ul>
	
	\section bag_intcmdfut Inter-Commodity Futures
	
	For Inter-Commodity futures, the 'Local Symbol' field in TWS is used for the 'Symbol' field in the API contract definition, e.g. "CL.BZ". They are always guaranteed combos, which is the default in the API.  

	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs intcmdfutcontract
		</li>
		<li>
			\snippet ContractSamples.java intcmdfutcontract
		</li>
		<li>
			\snippet ContractSamples.vb intcmdfutcontract
		</li>
		<li>
			\snippet ContractSamples.cpp intcmdfutcontract
		</li>
		<li>
			\snippet ContractSamples.py intcmdfutcontract
		</li>
	</ul>
	
	<i>Please be mindful of the fact that inter-commodity spreads are offered by the exchange directly, and so they are direct-routed though the legs have different underlyings. Only real time, and not historical, data is offered for inter-commodity spread contracts through the API. 
	
	It is also possible in many cases to create a spread of the same future contracts in a inter-commodity spread which is smart-routed and non-guaranteed. Historical data for this spread would generally be available from the API.
	Also, historical data for expired spread contracts is not available in TWS or the API. </i>
	
	<br><br>

*/