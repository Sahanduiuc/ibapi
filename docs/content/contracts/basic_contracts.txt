/*! \page basic_contracts Basic Contracts 

	\section cash FX Pairs
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs cashcontract
		</li>
		<li>
			\snippet ContractSamples.java cashcontract
		</li>
		<li>
			\snippet ContractSamples.vb cashcontract
		</li>
		<li>
			\snippet ContractSamples.cpp cashcontract
		</li>
		<li>
			\snippet ContractSamples.py cashcontract
		</li>
	</ul>
	
	\section stk Stocks
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs stkcontract
		</li>
		<li>
			\snippet ContractSamples.java stkcontract
		</li>
		<li>
			\snippet ContractSamples.vb stkcontract
		</li>
		<li>
		\snippet ContractSamples.cpp stkcontract
		</li>
		<li>
			\snippet ContractSamples.py stkcontract
		</li>
	</ul>
	
	For certain smart-routed stock contracts that have the same <b>symbol</b>, <b>currency</b> and <b>exchange</b>, you would also need to specify the <b>primary exchange</b> attribute to uniquely define the contract. This should be defined as the native exchange of a contract, and is good practice for all stocks:
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs stkcontractwithprimary
		</li>
		<li>
			\snippet ContractSamples.java stkcontractwithprimary
		</li>
		<li>
			\snippet ContractSamples.vb stkcontractwithprimary
		</li>
		<li>
		\snippet ContractSamples.cpp stkcontractwithprimary
		</li>
		<li>
			\snippet ContractSamples.py stkcontractwithprimary
		</li>
	</ul>
	
	As an alternative to defining the exchange and primary exchange fields, it is possible to specify the exchange field as "Exchange:Primary Exchange", e.g. "SMART:NASDAQ". The colon ":" or slash "/" separating this fields is known as the "Component Exchange Separator" and defined in the API Settings in Global Configuration. 
	
	\section ind Indexes
	ISINs for indices which are available in IB's database are available in the API as of TWS 965+.
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs indcontract
		</li>
		<li>
			\snippet ContractSamples.java indcontract
		</li>
		<li>
			\snippet ContractSamples.vb indcontract
		</li>
		<li>
		\snippet ContractSamples.cpp indcontract
		</li>
		<li>
			\snippet ContractSamples.py indcontract
		</li>
	</ul>
	
	\section cfd CFDs
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs cfdcontract
		</li>
		<li>
			\snippet ContractSamples.java cfdcontract
		</li>
		<li>
			\snippet ContractSamples.vb cfdcontract
		</li>
		<li>
		\snippet ContractSamples.cpp cfdcontract
		</li>
		<li>
			\snippet ContractSamples.py cfdcontract
		</li>
	</ul>
	
	\section fut Futures

	A regular futures contract is commonly defined using an expiry and the symbol field defined as the symbol of the underlying. 
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs futcontract
		</li>
		<li>
			\snippet ContractSamples.java futcontract
		</li>
		<li>
			\snippet ContractSamples.vb futcontract
		</li>
		<li>
		\snippet ContractSamples.cpp futcontract
		</li>
		<li>
			\snippet ContractSamples.py futcontract
		</li>
	</ul>
	
	By contract the 'local symbol' field is IB's symbol for the future itself (the Symbol within the TWS' Contract Description dialog).
	Since a local symbol uniquely defines a future, an expiry is not necessary.
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs futcontract_local_symbol
		</li>
		<li>
			\snippet ContractSamples.java futcontract_local_symbol
		</li>
		<li>
			\snippet ContractSamples.vb futcontract_local_symbol
		</li>
		<li>
		\snippet ContractSamples.cpp futcontract_local_symbol
		</li>
		<li>
			\snippet ContractSamples.py futcontract_local_symbol
		</li>
	</ul>
	
	Occasionally, you can expect to have more than a single future contract for the same underlying with the same expiry. To rule out the
	ambiguity, the contract's <b>multiplier</b> can be given as shown below:
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs futcontract_multiplier
		</li>
		<li>
			\snippet ContractSamples.java futcontract_multiplier
		</li>
		<li>
			\snippet ContractSamples.vb futcontract_multiplier
		</li>
		<li>
		\snippet ContractSamples.cpp futcontract_multiplier
		</li>
		<li>
			\snippet ContractSamples.py futcontract_multiplier
		</li>
	</ul>

	It is possible to use <b>continuous futures</b> contracts to receive historical data, real time bars, or contract details (requires TWS v966+). Continuous futures cannot be used with real time data or to place orders. 
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs continuousfuturescontract
		</li>
		<li>
			\snippet ContractSamples.java continuousfuturescontract
		</li>
		<li>
			\snippet ContractSamples.vb continuousfuturescontract
		</li>
		<li>
		\snippet ContractSamples.cpp continuousfuturescontract
		</li>
		<li>
			\snippet ContractSamples.py continuousfuturescontract
		</li>
	</ul>
	
	The security type "FUT+CONTFUT" can be used to request contract details about the futures and continuous futures on an underlying. 
	This security type cannot be used with other functionality.
	
	<ul id="tab">
		<li class="active">
		 \snippet ContractSamples.cs contandexpiringfut
		</li>
		<li>
			\snippet ContractSamples.java contandexpiringfut
		</li>
		<li>
			\snippet ContractSamples.vb contandexpiringfut
		</li>
		<li>
		\snippet ContractSamples.cpp contandexpiringfut
		</li>
		<li>
			\snippet ContractSamples.py contandexpiringfut
		</li>
	</ul>
	
	
	\section opt Options
	
	Options, like futures, also require an expiration date plus a <b>strike</b> and a <b>multiplier</b>:
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs optcontract
		</li>
		<li>
			\snippet ContractSamples.java optcontract
		</li>
		<li>
			\snippet ContractSamples.vb optcontract
		</li>
		<li>
			\snippet ContractSamples.cpp optcontract
		</li>
		<li>
			\snippet ContractSamples.py optcontract
		</li>
	</ul>
	
	It is not unusual to find many option contracts with an almost identical description (i.e. underlying symbol, strike, last trading date, multiplier, etc.).
	Adding more details such as the <b>trading class</b> will help:
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.java optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.vb optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.cpp optcontract_tradingclass
		</li>
		<li>
			\snippet ContractSamples.py optcontract_tradingclass
		</li>
	</ul>
	
	The OCC options symbol can be used to define an option contract in the API through the option's 'local symbol' field. 
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.java optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.vb optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.cpp optcontract_localsymbol
		</li>
		<li>
			\snippet ContractSamples.py optcontract_localsymbol
		</li>
	</ul>
	
	\section fop Futures on Options
	
	Futures on options follow the same rules as conventional option contracts:
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs fopcontract
		</li>
		<li>
			\snippet ContractSamples.java fopcontract
		</li>
		<li>
			\snippet ContractSamples.vb fopcontract
		</li>
		<li>
			\snippet ContractSamples.cpp fopcontract
		</li>
		<li>
			\snippet ContractSamples.py fopcontract
		</li>
	</ul>
	
	\section Bonds
	
	Bonds can be specified by defining the symbol as the CUSIP or ISIN.
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.java bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.vb bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.cpp bondwithcusip
		</li>
		<li>
			\snippet ContractSamples.py bondwithcusip
		</li>
	</ul>
	
	Bonds can also be defined with the conId and exchange as with any security type. 
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs bond
		</li>
		<li>
			\snippet ContractSamples.java bond
		</li>
		<li>
			\snippet ContractSamples.vb bond
		</li>
		<li>
			\snippet ContractSamples.cpp bond
		</li>
		<li>
			\snippet ContractSamples.py bond
		</li>
	</ul>
	
	\section funds Mutual Funds
	
	Mutual Funds are supported in the API. Note: Mutual Funds cannot be traded in paper accounts.
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs fundcontract
		</li>
		<li>
			\snippet ContractSamples.java fundcontract
		</li>
		<li>
			\snippet ContractSamples.vb fundcontract
		</li>
		<li>
			\snippet ContractSamples.cpp fundcontract
		</li>
		<li>
			\snippet ContractSamples.py fundcontract
		</li>
	</ul>
	
	\section Commodities
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs commoditycontract
		</li>
		<li>
			\snippet ContractSamples.java commoditycontract
		</li>
		<li>
			\snippet ContractSamples.vb commoditycontract
		</li>
		<li>
			\snippet ContractSamples.cpp commoditycontract
		</li>
		<li>
			\snippet ContractSamples.py commoditycontract
		</li>
	</ul>
	
	\section iopts Dutch Warrants
	
	Dutch Warrants (IOPTs) can be defined with the local symbol or contract ID (conid), but not the ISIN.
	
	<ul id="tab">
		<li class="active">
			\snippet ContractSamples.cs ioptcontract
		</li>
		<li>
			\snippet ContractSamples.java ioptcontract
		</li>
		<li>
			\snippet ContractSamples.vb ioptcontract
		</li>
		<li>
			\snippet ContractSamples.cpp ioptcontract
		</li>
		<li>
			\snippet ContractSamples.py ioptcontract
		</li>
	</ul>
	
	<br><br>

*/